class ErrorHandler{
          constructor(message,statusCode){
                    this.statusCode=statusCode;
                    this.message=message
          }// generally (must) sare class ke primitives cinstructor k andar aate h  
}
isko or acha krne k lie:-
class ErrorHandler extends Error{
          constructor(message,statusCode){
                    this.statusCode=statusCode;
                    super(message)
          }}
          /iise ye pata lagta h ki jo inbuilt Error class h usme message naam  ka primitive h jo wo apne(Error class)ke constructor se accept kr rha h
          or hmne super m diya h or hme pata h super parent k constructor ko call to krta h pr phele child k constructor s bind krdeta h 
          to mtlb super(message) s Error class k constructor k andar ki line this.message =message (jo hmne super k through constructor k args m bheja h ) or this bind child wali s hoga to child wale k lie ye line chal jaegi this.message = message to hme explicitly nhi likhni padhhi bs yhi optimization hua error class ko extend krke
          agr m super() ko bina args k call krta kyuki extens ka rule h super ko call krna hi padta h to bina args k call krta to errorhandler ke object ki message naam ki key to ban jati pr value undefined hoti kyuki super ko kux args nhi diye


Promise.map of bluebird with async function is asynchronous and executes all callack concurrenctly upto infinite and if we want that another callback will only execute if previous async callback is resolved then we use concurrency 1 so that 1 at a time will resolve first and then another callback executes,now the twist is that taht the next callback execute is not sequential, suppose if e console index of calback then after 1 callback resolved we see that 8 th index prints which means that sequence is disturbed in Promise.map of bluebird 
So with concurrency 1 in Promise.map we see that it executes one after the another but it is not necessary that another one is sequential, means if one async function is fully resolved then another one itertes but another not is not neccesary that another one is in sequence

To also maintain sequence while maintaining concurrency 1 we can use Promise.each of bluebird which executues 1st callback and waits for it fully resolution and then another index callback is called in sequence ,so sequence is also maintained in this,as it maintains sequence and awaits for a callback to complete before executing another one so it has by default concurrency 1 which can't be overriden so concurrency is not required in Promise.each
Also Promise.reduce don't accept concurrecy as hme pata h ki reduce ka kaam hi tb bnega jb wo synchronous chlega mtlb acc ka prev s relation hota h na to prev wale ko phele hi solve hona padega isliye wo bhii concurrency 1 ka saath chlta h by default
